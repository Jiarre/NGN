#!/usr/bin/env python3

"""
About: ComNetsEmu CLI utility
"""

import argparse
import subprocess
import sys

import docker
from mininet.log import LEVELS, debug, error, info, lg, output, warn


def run():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbosity",
                        choices=LEVELS.keys(), default='info')
    parser.add_argument("-c", "--clean", action="store_true",
                        help="Run cleanups")
    args = parser.parse_args()

    lg.setLogLevel(args.verbosity)

    if args.clean:
        cleanup()


def cleanup():
    info("-" * 80 + "\n"+"*** Run ComNetsEmu's cleanups\n" +
         "-" * 80 + "\n")
    info("*** Run mininet's cleanups:\n")
    subprocess.run(["mn", "-c"], check=True)
    cleanup_docker_containers()


def cleanup_docker_containers():
    info("*** Run docker container cleanups\n")
    client = docker.from_env()
    containers = client.containers.list(all=True)
    docker_hosts = [c for c in containers if c.name.startswith("mn.")]
    internal_containers = [c for c in containers if c.name.startswith("mni.")]

    if docker_hosts:
        info("Force remove all running DockerHost instances: {}\n".format(
            ", ".join([c.name for c in docker_hosts])))
        for c in docker_hosts:
            c.remove(force=True)

    if internal_containers:
        info("Force remove all running internal Docker containers: {}\n".format(
            ", ".join([c.name for c in internal_containers])))
        for c in internal_containers:
            c.remove(force=True)


if __name__ == "__main__":
    try:
        run()
    except KeyboardInterrupt:
        info("\n\nKeyboard Interrupt. Shutting down and cleaning up...\n\n")
        cleanup()
    except Exception:
        # Print exception
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ("-"*80 + "\n" +
                    "Caught exception. Cleaning up...\n\n" +
                    "%s: %s\n" % (type_.__name__, val_) +
                    "-"*80 + "\n")
        error(errorMsg)
        # Print stack trace to debug log
        import traceback
        stackTrace = traceback.format_exc()
        debug(stackTrace + "\n")
