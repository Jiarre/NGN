#!/usr/bin/env python3

"""
About: ComNetsEmu CLI utility
"""

import argparse
import re
import subprocess
from shlex import split
import sys
import shutil

import docker
from mininet.log import LEVELS, debug, error, info, lg
from comnetsemu.net import VNFMANGER_MOUNTED_DIR


def run():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbosity",
                        choices=LEVELS.keys(), default='info')
    parser.add_argument("-c", "--clean", action="store_true",
                        help="Run cleanups")
    args = parser.parse_args()

    lg.setLogLevel(args.verbosity)

    if args.clean:
        cleanup()


def sh(cmd, check=True):
    ret = subprocess.run(split(cmd), check=check,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return ret.stdout.decode('utf-8')


def cleanup():
    info("-" * 80 + "\n"+"*** Run ComNetsEmu's cleanups\n" +
         "-" * 80 + "\n")
    info("*** Run mininet's cleanups\n")
    subprocess.run(["mn", "-c"], check=True)
    cleanup_docker_containers()
    cleanup_netdevs()
    info("*** Remove temp directories\n")
    shutil.rmtree(VNFMANGER_MOUNTED_DIR, ignore_errors=True)


def cleanup_docker_containers():
    info("*** Run docker container cleanups\n")
    client = docker.from_env()
    containers = client.containers.list(all=True)
    docker_hosts = list()
    internal_containers = list()
    for c in containers:
        _type = c.labels.get("comnetsemu", None)
        if not _type:
            continue
        if _type == "dockerhost":
            docker_hosts.append(c)
        elif _type == "dockercontainer":
            internal_containers.append(c)

    if docker_hosts:
        info("Force remove all running DockerHost instances: {}\n".format(
            ", ".join([c.name for c in docker_hosts])))
        for c in docker_hosts:
            c.remove(force=True)

    if internal_containers:
        info("Force remove all running internal Docker containers: {}\n".format(
            ", ".join([c.name for c in internal_containers])))
        for c in internal_containers:
            c.remove(force=True)


def cleanup_netdevs():
    """ISSUE: Maybe too aggressive."""
    info(
        "*** Remove all network devices in /sys/class/net/ with the pattern [a-zA-Z]*[\d]+-[a-zA-Z]*[\d]+ \n")
    links = sh("ip link show")
    ret = re.findall(r"[a-zA-Z]*[\d]+-[a-zA-Z]*[\d]+", links)
    if ret:
        for link in ret:
            sh("ip link delete {}".format(link), check=False)


#  TODO:  <05-08-19, Zuo> Add helpers to setup Userspace network framework like DPDK #

if __name__ == "__main__":
    try:
        run()
    except KeyboardInterrupt:
        info("\n\nKeyboard Interrupt. Shutting down and cleaning up...\n\n")
        cleanup()
    except Exception:
        # Print exception
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ("-"*80 + "\n" +
                    "Caught exception. Cleaning up...\n\n" +
                    "%s: %s\n" % (type_.__name__, val_) +
                    "-"*80 + "\n")
        error(errorMsg)
        # Print stack trace to debug log
        import traceback
        stackTrace = traceback.format_exc()
        debug(stackTrace + "\n")
